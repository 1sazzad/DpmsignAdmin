"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const order_controller_1 = __importDefault(require("../controller/order.controller"));
const rateLimiter_middleware_1 = require("../middleware/rateLimiter.middleware");
const order_middleware_1 = __importDefault(require("../middleware/order.middleware"));
const imageUploader_middleware_1 = __importDefault(require("../middleware/imageUploader.middleware"));
const auth_middleware_1 = __importDefault(require("../middleware/auth.middleware"));
const orderMiddleware = new order_middleware_1.default();
const authMiddleware = new auth_middleware_1.default();
const orderController = new order_controller_1.default();
const orderImageUploader = new imageUploader_middleware_1.default();
const orderRouter = express_1.default.Router();
orderRouter.get("/", authMiddleware.authenticate(["admin", "agent", "designer"]), orderMiddleware.validateFilteringQueries, orderController.getAllOrders);
orderRouter.get("/customer/:customerId", orderMiddleware.validateOrderByCustomer, orderController.getOrdersByCustomer);
orderRouter.post("/create", rateLimiter_middleware_1.strictLimiter, orderImageUploader.uploader("order-images").array("designFiles", 5), orderImageUploader.compressImages, orderMiddleware.validateOrderCreation, orderController.createOrder);
orderRouter.post("/create-request", rateLimiter_middleware_1.strictLimiter, orderImageUploader.uploader("order-images").array("designFiles", 5), orderImageUploader.compressImages, orderMiddleware.validateOrderRequestCreation, orderController.createOrderRequest);
orderRouter.put("/update-order", rateLimiter_middleware_1.strictLimiter, orderMiddleware.validateOrderUpdate, orderController.updateOrder);
orderRouter.post("/add-payment", rateLimiter_middleware_1.strictLimiter, orderMiddleware.validateOrderPaymentCreation, orderController.createOrderPayment);
orderRouter.post("/payment/success", rateLimiter_middleware_1.strictLimiter, orderController.paymentSuccess);
orderRouter.post("/payment/fail", rateLimiter_middleware_1.strictLimiter, orderController.paymentFail);
orderRouter.post("/payment/cancel", rateLimiter_middleware_1.strictLimiter, orderController.paymentCancel);
exports.default = orderRouter;
