// src/Components/AdminPanel/Pages/Login/Login.test.jsx.example

import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom'; // For extended matchers like .toBeInTheDocument()
import { BrowserRouter } from 'react-router-dom'; // Needed for useNavigate
import userEvent from '@testing-library/user-event'; // For more realistic user interactions

import Login from './Login'; // Adjust path if needed
import useAuth from '../../../../auth/useAuth'; // Adjust path

// Mock the useAuth hook
vi.mock('../../../../auth/useAuth', () => ({
  __esModule: true, // Default export handling
  default: vi.fn(), // Mock the hook itself
}));

// Mock useNavigate
const mockNavigate = vi.fn();
vi.mock('react-router-dom', async () => {
  const actual = await vi.importActual('react-router-dom');
  return {
    ...actual,
    useNavigate: () => mockNavigate,
  };
});

describe('Login Component', () => {
  let mockLogin;

  beforeEach(() => {
    // Reset mocks before each test
    mockLogin = vi.fn();
    useAuth.mockReturnValue({
      login: mockLogin,
      // isAuthenticated: vi.fn().mockReturnValue(false), // If needed
    });
    mockNavigate.mockClear();
  });

  test('renders login form correctly', () => {
    render(
      <BrowserRouter>
        <Login />
      </BrowserRouter>
    );

    expect(screen.getByLabelText(/email address/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/password/i)).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /login/i })).toBeInTheDocument();
  });

  test('allows user to type in email and password fields', async () => {
    const user = userEvent.setup();
    render(
      <BrowserRouter>
        <Login />
      </BrowserRouter>
    );

    const emailInput = screen.getByLabelText(/email address/i);
    const passwordInput = screen.getByLabelText(/password/i);

    await user.type(emailInput, 'test@example.com');
    expect(emailInput.value).toBe('test@example.com');

    await user.type(passwordInput, 'password123');
    expect(passwordInput.value).toBe('password123');
  });

  test('shows error message if email or password are not provided', async () => {
    const user = userEvent.setup();
    render(
      <BrowserRouter>
        <Login />
      </BrowserRouter>
    );

    const loginButton = screen.getByRole('button', { name: /login/i });
    await user.click(loginButton);

    expect(await screen.findByText(/email and password are required/i)).toBeInTheDocument();
    expect(mockLogin).not.toHaveBeenCalled();
  });

  test('calls auth.login with credentials and navigates on successful login', async () => {
    const user = userEvent.setup();
    mockLogin.mockResolvedValue({ success: true, admin: { name: 'Test Admin' } }); // Simulate successful login

    render(
      <BrowserRouter>
        <Login />
      </BrowserRouter>
    );

    const emailInput = screen.getByLabelText(/email address/i);
    const passwordInput = screen.getByLabelText(/password/i);
    const loginButton = screen.getByRole('button', { name: /login/i });

    await user.type(emailInput, 'admin@example.com');
    await user.type(passwordInput, 'password');
    await user.click(loginButton);

    await waitFor(() => {
      expect(mockLogin).toHaveBeenCalledWith('admin@example.com', 'password');
    });
    await waitFor(() => {
      expect(mockNavigate).toHaveBeenCalledWith('/admin/dashboard', { replace: true });
    });
  });

  test('shows error message from auth.login on failed login', async () => {
    const user = userEvent.setup();
    mockLogin.mockResolvedValue({ success: false, message: 'Invalid credentials from API' }); // Simulate failed login

    render(
      <BrowserRouter>
        <Login />
      </BrowserRouter>
    );

    const emailInput = screen.getByLabelText(/email address/i);
    const passwordInput = screen.getByLabelText(/password/i);
    const loginButton = screen.getByRole('button', { name: /login/i });

    await user.type(emailInput, 'admin@example.com');
    await user.type(passwordInput, 'wrongpassword');
    await user.click(loginButton);

    expect(await screen.findByText(/invalid credentials from API/i)).toBeInTheDocument();
    expect(mockNavigate).not.toHaveBeenCalled();
  });
});
